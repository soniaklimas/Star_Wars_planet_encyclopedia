{"version":3,"sources":["assets/LOGO.svg","assets/ARROW CLOSE.svg","assets/ARROW OPEN.svg","theme/GlobalStyle.js","components/MobileView.js","components/MovieContent.js","components/MovieItem.js","containers/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","MobileView","props","Wrapper","styled","div","index","MobileRow","MobileCol","planetData","map","item","style","color","name","rotationPeriod","orbitalPeriod","diameter","climate","surfaceWater","population","MovieContent","columns","selector","sortable","cell","row","center","window","innerWidth","noHeader","customStyles","table","width","margin","headRow","borderBottom","headCells","textAlign","paddingLeft","paddingRight","rows","borderBottomWidth","cells","responsive","data","planets","Title","h5","MovieContentWrapper","height","MovieItem","useState","isOpen","setIsOpen","moviePlanet","forEach","planet","filmConnection","films","film","id","push","title","onClick","src","ArrowClose","ArrowOpen","alt","MoviesList","LogoWrapper","List","ul","ListItem","li","screen","Logo","key","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.608312a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LOGO.8b6d4945.svg\";","module.exports = __webpack_public_path__ + \"static/media/ARROW CLOSE.9f3a719a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ARROW OPEN.4d66597d.svg\";","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow:wght@400;700&display=swap');\r\n*, *::before, *::after{\r\n \r\n}\r\nbody{\r\nfont-family: 'Barlow', sans-serif;\r\nmargin: 0\r\n}\r\nh5{\r\n  margin-bottom: 0;\r\n  font-family: 'Barlow', sans-serif\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n// box-sizing: border-box;\r\n// -webkit-font-smoothing: antialiased;\r\n// -moz-osx-font-smoothing: grayscale;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MobileView = (props) => {\r\n  const Wrapper = styled.div`\r\n    background-color: ${(props) =>\r\n      props.index % 2 !== 0 ? \"rgba(229, 229, 229, 0.5)\" : null};\r\n    padding: 15px 0;\r\n  `;\r\n\r\n  const MobileRow = styled.div`\r\n    font-size: 14px;\r\n    display: flex;\r\n    padding: 0 10px;\r\n  `;\r\n\r\n  const MobileCol = styled.div`\r\n    font-size: 14px;\r\n    width: 50%;\r\n    padding: 5px 48px 5px 0px;\r\n  `;\r\n\r\n  return props.planetData.map((item, index) => (\r\n    <Wrapper index={index}>\r\n      <MobileRow>\r\n        <MobileCol>Planet name</MobileCol>\r\n        <MobileCol style={{ color: \"#00687F\" }}>{item.name}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Rotation period</MobileCol>\r\n        <MobileCol>{item.rotationPeriod}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Orbital period</MobileCol>\r\n        <MobileCol>{item.orbitalPeriod}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Diameter</MobileCol>\r\n        <MobileCol>{item.diameter}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Climate</MobileCol>\r\n        <MobileCol>{item.climate}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Surface water</MobileCol>\r\n        <MobileCol>{item.surfaceWater}</MobileCol>\r\n      </MobileRow>\r\n      <MobileRow>\r\n        <MobileCol>Population</MobileCol>\r\n        <MobileCol>{item.population}</MobileCol>\r\n      </MobileRow>\r\n    </Wrapper>\r\n  ));\r\n};\r\n\r\nexport default MobileView;\r\n","import React from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MobileView from \"../components/MobileView\";\r\n\r\nconst MovieContent = (props) => {\r\n  const customStyles = {\r\n    table: {\r\n      style: {\r\n        width: \"698px\",\r\n        margin: \"0 auto\",\r\n      },\r\n    },\r\n    headRow: {\r\n      style: {\r\n        borderBottom: \"1px solid #C4C4C4\",\r\n      },\r\n    },\r\n    headCells: {\r\n      style: {\r\n        textAlign: \"right\",\r\n        \"&:nth-of-type(1)\": {\r\n          color: \"#00687F\",\r\n          paddingLeft: \"0px\",\r\n          paddingRight: \"0px\",\r\n        },\r\n      },\r\n    },\r\n    rows: {\r\n      style: {\r\n        \"&:not(:last-of-type)\": {\r\n          borderBottomWidth: \"0px\",\r\n        },\r\n      },\r\n    },\r\n    cells: {\r\n      style: {\r\n        \"&:nth-of-type(1)\": {\r\n          paddingLeft: \"0px\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Planet Name\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n      cell: (row) => <div style={{ color: \"#00687F\" }}>{row.name}</div>,\r\n    },\r\n    {\r\n      name: \"Rotation period\",\r\n      selector: \"rotationPeriod\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Orbital period\",\r\n      selector: \"orbitalPeriod\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Diameter\",\r\n      selector: \"diameter\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Climate\",\r\n      selector: \"climates\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Surface water\",\r\n      selector: \"surfaceWater\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Population\",\r\n      selector: \"population\",\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n  ];\r\n\r\n  return window.innerWidth > 480 ? (\r\n    <DataTable\r\n      columns={columns}\r\n      noHeader={true}\r\n      customStyles={customStyles}\r\n      responsive={false}\r\n      data={props.planets}\r\n    />\r\n  ) : (\r\n    <MobileView planetData={props.planets} />\r\n  );\r\n};\r\n\r\nexport default MovieContent;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport data from \"../data/data\";\r\nimport ArrowClose from \"../assets/ARROW CLOSE.svg\";\r\nimport ArrowOpen from \"../assets/ARROW OPEN.svg\";\r\nimport MovieContent from \"./MovieContent\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 15px;\r\n  min-height: 48px;\r\n`;\r\n\r\nconst Title = styled.h5`\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 48px;\r\n  color: #00687f;\r\n`;\r\n\r\nconst MovieContentWrapper = styled.div`\r\n  height: ${(props) => props.height};\r\n  box-shadow: 0px 4px 12px rgba(224, 230, 238, 0.5);\r\n`;\r\n\r\nconst MovieItem = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const moviePlanet = [];\r\n  const planets = data.data.planets;\r\n  planets.forEach((planet) => {\r\n    planet.filmConnection.films.forEach((film) => {\r\n      if (film.id === props.id) {\r\n        moviePlanet.push(planet);\r\n      }\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <Title>{props.title}</Title>\r\n        <img\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          src={isOpen ? ArrowClose : ArrowOpen}\r\n          alt=\"arrowClose\"\r\n        />\r\n      </Wrapper>\r\n      {isOpen ? (\r\n        <MovieContentWrapper>\r\n          <MovieContent planets={moviePlanet} />\r\n        </MovieContentWrapper>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieItem;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport data from \"../data/data.json\";\r\nimport GlobalStyle from \"../theme/GlobalStyle\";\r\nimport Logo from \"../assets/LOGO.svg\";\r\nimport MovieItem from \"../components/MovieItem\";\r\n\r\nconst MoviesList = () => {\r\n  const Wrapper = styled.div`\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 96px;\r\n    transform: translateX(-50%);\r\n    width: ${(props) => (props.width > 480 ? \"790px\" : \"343px\")};\r\n    min-height: 521px;\r\n    border-radius: 8px;\r\n    background-color: #e0e6ee;\r\n  `;\r\n\r\n  const LogoWrapper = styled.div`\r\n    width: \"100%\";\r\n    padding: ${(props) =>\r\n      props.width > 480 ? \"32px 237px 16px 237px;\" : \"35px 60px 15px\"};\r\n  `;\r\n\r\n  const List = styled.ul`\r\n    list-style: none;\r\n  `;\r\n\r\n  const ListItem = styled.li`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 48px;\r\n    margin: 0 30px 16px 30px;\r\n    box-shadow: 0px 2px 1px rgba(196, 196, 196, 0.2);\r\n    border-radius: 4px;\r\n    background: #ffffff;\r\n  `;\r\n\r\n  const width = window.screen.width;\r\n\r\n  return (\r\n    <Wrapper width={width}>\r\n      <>\r\n        <GlobalStyle />\r\n        <LogoWrapper width={width}>\r\n          <img src={Logo} alt=\"logo\" width={width > 480 ? \"100%\" : \"222px\"} />\r\n        </LogoWrapper>\r\n        <List>\r\n          {data.data.films.map((item) => (\r\n            <ListItem width={width}>\r\n              <MovieItem\r\n                key={item.id}\r\n                data={data.data.planets}\r\n                id={item.id}\r\n                title={item.title}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MoviesList from \"./containers/MoviesList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MoviesList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}